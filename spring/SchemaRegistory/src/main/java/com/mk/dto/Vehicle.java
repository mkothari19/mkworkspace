/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.mk.dto;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Vehicle extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8728420195120318790L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Vehicle\",\"namespace\":\"com.mk.dto\",\"fields\":[{\"name\":\"device_id\",\"type\":\"string\"},{\"name\":\"timestamp\",\"type\":\"string\"},{\"name\":\"latitude\",\"type\":\"double\"},{\"name\":\"longitude\",\"type\":\"double\"},{\"name\":\"altitude\",\"type\":\"double\"},{\"name\":\"speed\",\"type\":\"double\"},{\"name\":\"direction\",\"type\":\"double\"},{\"name\":\"ignition_status\",\"type\":\"boolean\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Vehicle> ENCODER =
      new BinaryMessageEncoder<Vehicle>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Vehicle> DECODER =
      new BinaryMessageDecoder<Vehicle>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Vehicle> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Vehicle> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Vehicle>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Vehicle to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Vehicle from a ByteBuffer. */
  public static Vehicle fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence device_id;
  @Deprecated public java.lang.CharSequence timestamp;
  @Deprecated public double latitude;
  @Deprecated public double longitude;
  @Deprecated public double altitude;
  @Deprecated public double speed;
  @Deprecated public double direction;
  @Deprecated public boolean ignition_status;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Vehicle() {}

  /**
   * All-args constructor.
   * @param device_id The new value for device_id
   * @param timestamp The new value for timestamp
   * @param latitude The new value for latitude
   * @param longitude The new value for longitude
   * @param altitude The new value for altitude
   * @param speed The new value for speed
   * @param direction The new value for direction
   * @param ignition_status The new value for ignition_status
   */
  public Vehicle(java.lang.CharSequence device_id, java.lang.CharSequence timestamp, java.lang.Double latitude, java.lang.Double longitude, java.lang.Double altitude, java.lang.Double speed, java.lang.Double direction, java.lang.Boolean ignition_status) {
    this.device_id = device_id;
    this.timestamp = timestamp;
    this.latitude = latitude;
    this.longitude = longitude;
    this.altitude = altitude;
    this.speed = speed;
    this.direction = direction;
    this.ignition_status = ignition_status;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return device_id;
    case 1: return timestamp;
    case 2: return latitude;
    case 3: return longitude;
    case 4: return altitude;
    case 5: return speed;
    case 6: return direction;
    case 7: return ignition_status;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: device_id = (java.lang.CharSequence)value$; break;
    case 1: timestamp = (java.lang.CharSequence)value$; break;
    case 2: latitude = (java.lang.Double)value$; break;
    case 3: longitude = (java.lang.Double)value$; break;
    case 4: altitude = (java.lang.Double)value$; break;
    case 5: speed = (java.lang.Double)value$; break;
    case 6: direction = (java.lang.Double)value$; break;
    case 7: ignition_status = (java.lang.Boolean)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'device_id' field.
   * @return The value of the 'device_id' field.
   */
  public java.lang.CharSequence getDeviceId() {
    return device_id;
  }

  /**
   * Sets the value of the 'device_id' field.
   * @param value the value to set.
   */
  public void setDeviceId(java.lang.CharSequence value) {
    this.device_id = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public java.lang.CharSequence getTimestamp() {
    return timestamp;
  }

  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(java.lang.CharSequence value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'latitude' field.
   * @return The value of the 'latitude' field.
   */
  public java.lang.Double getLatitude() {
    return latitude;
  }

  /**
   * Sets the value of the 'latitude' field.
   * @param value the value to set.
   */
  public void setLatitude(java.lang.Double value) {
    this.latitude = value;
  }

  /**
   * Gets the value of the 'longitude' field.
   * @return The value of the 'longitude' field.
   */
  public java.lang.Double getLongitude() {
    return longitude;
  }

  /**
   * Sets the value of the 'longitude' field.
   * @param value the value to set.
   */
  public void setLongitude(java.lang.Double value) {
    this.longitude = value;
  }

  /**
   * Gets the value of the 'altitude' field.
   * @return The value of the 'altitude' field.
   */
  public java.lang.Double getAltitude() {
    return altitude;
  }

  /**
   * Sets the value of the 'altitude' field.
   * @param value the value to set.
   */
  public void setAltitude(java.lang.Double value) {
    this.altitude = value;
  }

  /**
   * Gets the value of the 'speed' field.
   * @return The value of the 'speed' field.
   */
  public java.lang.Double getSpeed() {
    return speed;
  }

  /**
   * Sets the value of the 'speed' field.
   * @param value the value to set.
   */
  public void setSpeed(java.lang.Double value) {
    this.speed = value;
  }

  /**
   * Gets the value of the 'direction' field.
   * @return The value of the 'direction' field.
   */
  public java.lang.Double getDirection() {
    return direction;
  }

  /**
   * Sets the value of the 'direction' field.
   * @param value the value to set.
   */
  public void setDirection(java.lang.Double value) {
    this.direction = value;
  }

  /**
   * Gets the value of the 'ignition_status' field.
   * @return The value of the 'ignition_status' field.
   */
  public java.lang.Boolean getIgnitionStatus() {
    return ignition_status;
  }

  /**
   * Sets the value of the 'ignition_status' field.
   * @param value the value to set.
   */
  public void setIgnitionStatus(java.lang.Boolean value) {
    this.ignition_status = value;
  }

  /**
   * Creates a new Vehicle RecordBuilder.
   * @return A new Vehicle RecordBuilder
   */
  public static com.mk.dto.Vehicle.Builder newBuilder() {
    return new com.mk.dto.Vehicle.Builder();
  }

  /**
   * Creates a new Vehicle RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Vehicle RecordBuilder
   */
  public static com.mk.dto.Vehicle.Builder newBuilder(com.mk.dto.Vehicle.Builder other) {
    return new com.mk.dto.Vehicle.Builder(other);
  }

  /**
   * Creates a new Vehicle RecordBuilder by copying an existing Vehicle instance.
   * @param other The existing instance to copy.
   * @return A new Vehicle RecordBuilder
   */
  public static com.mk.dto.Vehicle.Builder newBuilder(com.mk.dto.Vehicle other) {
    return new com.mk.dto.Vehicle.Builder(other);
  }

  /**
   * RecordBuilder for Vehicle instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Vehicle>
    implements org.apache.avro.data.RecordBuilder<Vehicle> {

    private java.lang.CharSequence device_id;
    private java.lang.CharSequence timestamp;
    private double latitude;
    private double longitude;
    private double altitude;
    private double speed;
    private double direction;
    private boolean ignition_status;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.mk.dto.Vehicle.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.device_id)) {
        this.device_id = data().deepCopy(fields()[0].schema(), other.device_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[1].schema(), other.timestamp);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.latitude)) {
        this.latitude = data().deepCopy(fields()[2].schema(), other.latitude);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.longitude)) {
        this.longitude = data().deepCopy(fields()[3].schema(), other.longitude);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.altitude)) {
        this.altitude = data().deepCopy(fields()[4].schema(), other.altitude);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.speed)) {
        this.speed = data().deepCopy(fields()[5].schema(), other.speed);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.direction)) {
        this.direction = data().deepCopy(fields()[6].schema(), other.direction);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.ignition_status)) {
        this.ignition_status = data().deepCopy(fields()[7].schema(), other.ignition_status);
        fieldSetFlags()[7] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Vehicle instance
     * @param other The existing instance to copy.
     */
    private Builder(com.mk.dto.Vehicle other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.device_id)) {
        this.device_id = data().deepCopy(fields()[0].schema(), other.device_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[1].schema(), other.timestamp);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.latitude)) {
        this.latitude = data().deepCopy(fields()[2].schema(), other.latitude);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.longitude)) {
        this.longitude = data().deepCopy(fields()[3].schema(), other.longitude);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.altitude)) {
        this.altitude = data().deepCopy(fields()[4].schema(), other.altitude);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.speed)) {
        this.speed = data().deepCopy(fields()[5].schema(), other.speed);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.direction)) {
        this.direction = data().deepCopy(fields()[6].schema(), other.direction);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.ignition_status)) {
        this.ignition_status = data().deepCopy(fields()[7].schema(), other.ignition_status);
        fieldSetFlags()[7] = true;
      }
    }

    /**
      * Gets the value of the 'device_id' field.
      * @return The value.
      */
    public java.lang.CharSequence getDeviceId() {
      return device_id;
    }

    /**
      * Sets the value of the 'device_id' field.
      * @param value The value of 'device_id'.
      * @return This builder.
      */
    public com.mk.dto.Vehicle.Builder setDeviceId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.device_id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'device_id' field has been set.
      * @return True if the 'device_id' field has been set, false otherwise.
      */
    public boolean hasDeviceId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'device_id' field.
      * @return This builder.
      */
    public com.mk.dto.Vehicle.Builder clearDeviceId() {
      device_id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * @return The value.
      */
    public java.lang.CharSequence getTimestamp() {
      return timestamp;
    }

    /**
      * Sets the value of the 'timestamp' field.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public com.mk.dto.Vehicle.Builder setTimestamp(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.timestamp = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * @return This builder.
      */
    public com.mk.dto.Vehicle.Builder clearTimestamp() {
      timestamp = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'latitude' field.
      * @return The value.
      */
    public java.lang.Double getLatitude() {
      return latitude;
    }

    /**
      * Sets the value of the 'latitude' field.
      * @param value The value of 'latitude'.
      * @return This builder.
      */
    public com.mk.dto.Vehicle.Builder setLatitude(double value) {
      validate(fields()[2], value);
      this.latitude = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'latitude' field has been set.
      * @return True if the 'latitude' field has been set, false otherwise.
      */
    public boolean hasLatitude() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'latitude' field.
      * @return This builder.
      */
    public com.mk.dto.Vehicle.Builder clearLatitude() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'longitude' field.
      * @return The value.
      */
    public java.lang.Double getLongitude() {
      return longitude;
    }

    /**
      * Sets the value of the 'longitude' field.
      * @param value The value of 'longitude'.
      * @return This builder.
      */
    public com.mk.dto.Vehicle.Builder setLongitude(double value) {
      validate(fields()[3], value);
      this.longitude = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'longitude' field has been set.
      * @return True if the 'longitude' field has been set, false otherwise.
      */
    public boolean hasLongitude() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'longitude' field.
      * @return This builder.
      */
    public com.mk.dto.Vehicle.Builder clearLongitude() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'altitude' field.
      * @return The value.
      */
    public java.lang.Double getAltitude() {
      return altitude;
    }

    /**
      * Sets the value of the 'altitude' field.
      * @param value The value of 'altitude'.
      * @return This builder.
      */
    public com.mk.dto.Vehicle.Builder setAltitude(double value) {
      validate(fields()[4], value);
      this.altitude = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'altitude' field has been set.
      * @return True if the 'altitude' field has been set, false otherwise.
      */
    public boolean hasAltitude() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'altitude' field.
      * @return This builder.
      */
    public com.mk.dto.Vehicle.Builder clearAltitude() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'speed' field.
      * @return The value.
      */
    public java.lang.Double getSpeed() {
      return speed;
    }

    /**
      * Sets the value of the 'speed' field.
      * @param value The value of 'speed'.
      * @return This builder.
      */
    public com.mk.dto.Vehicle.Builder setSpeed(double value) {
      validate(fields()[5], value);
      this.speed = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'speed' field has been set.
      * @return True if the 'speed' field has been set, false otherwise.
      */
    public boolean hasSpeed() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'speed' field.
      * @return This builder.
      */
    public com.mk.dto.Vehicle.Builder clearSpeed() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'direction' field.
      * @return The value.
      */
    public java.lang.Double getDirection() {
      return direction;
    }

    /**
      * Sets the value of the 'direction' field.
      * @param value The value of 'direction'.
      * @return This builder.
      */
    public com.mk.dto.Vehicle.Builder setDirection(double value) {
      validate(fields()[6], value);
      this.direction = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'direction' field has been set.
      * @return True if the 'direction' field has been set, false otherwise.
      */
    public boolean hasDirection() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'direction' field.
      * @return This builder.
      */
    public com.mk.dto.Vehicle.Builder clearDirection() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'ignition_status' field.
      * @return The value.
      */
    public java.lang.Boolean getIgnitionStatus() {
      return ignition_status;
    }

    /**
      * Sets the value of the 'ignition_status' field.
      * @param value The value of 'ignition_status'.
      * @return This builder.
      */
    public com.mk.dto.Vehicle.Builder setIgnitionStatus(boolean value) {
      validate(fields()[7], value);
      this.ignition_status = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'ignition_status' field has been set.
      * @return True if the 'ignition_status' field has been set, false otherwise.
      */
    public boolean hasIgnitionStatus() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'ignition_status' field.
      * @return This builder.
      */
    public com.mk.dto.Vehicle.Builder clearIgnitionStatus() {
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Vehicle build() {
      try {
        Vehicle record = new Vehicle();
        record.device_id = fieldSetFlags()[0] ? this.device_id : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.timestamp = fieldSetFlags()[1] ? this.timestamp : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.latitude = fieldSetFlags()[2] ? this.latitude : (java.lang.Double) defaultValue(fields()[2]);
        record.longitude = fieldSetFlags()[3] ? this.longitude : (java.lang.Double) defaultValue(fields()[3]);
        record.altitude = fieldSetFlags()[4] ? this.altitude : (java.lang.Double) defaultValue(fields()[4]);
        record.speed = fieldSetFlags()[5] ? this.speed : (java.lang.Double) defaultValue(fields()[5]);
        record.direction = fieldSetFlags()[6] ? this.direction : (java.lang.Double) defaultValue(fields()[6]);
        record.ignition_status = fieldSetFlags()[7] ? this.ignition_status : (java.lang.Boolean) defaultValue(fields()[7]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Vehicle>
    WRITER$ = (org.apache.avro.io.DatumWriter<Vehicle>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Vehicle>
    READER$ = (org.apache.avro.io.DatumReader<Vehicle>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
